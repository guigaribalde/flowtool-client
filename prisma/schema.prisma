datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  online
  offline
}

enum InviteStatus {
  pending
  accepted
  declined
}

enum UserRole {
  admin
  member
  owner
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  clerkId         String            @unique
  email           String
  username        String
  status          Status?           @default(offline)
  socketId        String?
  UserOnWorkSpace UserOnWorkSpace[]
}

model Space {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  WorkSpace   WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  workSpaceId String    @db.ObjectId

  boards Board[]
}

model WorkSpace {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  Space           Space[]
  UserOnWorkSpace UserOnWorkSpace[]
}

model UserOnWorkSpace {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  workSpaceId String    @db.ObjectId
  workSpace   WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  invitedUserEmail String?

  userRole     UserRole     @default(member)
  inviteStatus InviteStatus @default(pending)
}

model Board {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  columns Column[]

  Space   Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId String? @db.ObjectId
}

model Column {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  index Int

  tasks Task[]

  Board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String? @db.ObjectId
}

model Task {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  index Int

  Column   Column? @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId String? @db.ObjectId
}
