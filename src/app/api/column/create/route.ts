import prisma from '@prisma/prisma';
import { auth } from '@clerk/nextjs';
import { isOnSpace, isOnWorkSpace } from '@auth/index';
import { ObjectId } from 'bson';

const createColumn = async ({
	spaceId,
	index,
	name,
	id,
	boardId,
}: {
	spaceId: string;
	index: number;
	name: string;
	id: string;
	boardId: string | undefined;
}) => {
	const randomId = new ObjectId().toString();
	const column = await prisma.column.create({
		data: {
			name,
			index,
			id,
			tasks: {},
			Board: {
				connectOrCreate: {
					where: {
						id: boardId || randomId,
					},
					create: {
						name: 'AUTOGENERATED_BOARD',
						Space: {
							connect: {
								id: spaceId,
							},
						},
					},
				},
			},
		},
	});

	return column;
};

export async function POST(req: Request) {
	const { spaceId, id, index, name } = await req.json();
	const { userId } = auth();

	if (!userId)
		return Response.json(
			{ message: 'UNAUTHORIZED' },
			{ status: 401, statusText: 'Unauthorized' },
		);

	const workspace = await prisma.workSpace.findFirst({
		where: {
			Space: {
				some: {
					id: spaceId,
				},
			},
		},
		include: {
			Space: {
				where: {
					id: spaceId,
				},
				include: {
					boards: true,
				},
			},
			UserOnWorkSpace: {
				where: {
					user: {
						clerkId: userId,
					},
				},
				include: {
					user: true,
				},
			},
		},
	});

	if (!workspace?.UserOnWorkSpace?.length || !workspace?.Space?.length) {
		await prisma.$disconnect();
		return Response.json(
			{ message: 'UNAUTHORIZED' },
			{ status: 401, statusText: 'Unauthorized' },
		);
	}

	const boardId = workspace.Space[0]?.boards?.length
		? workspace.Space[0].boards[0].id
		: undefined;

	const column = await createColumn({
		id,
		index,
		name,
		spaceId,
		boardId,
	});
	await prisma.$disconnect();

	if (!column)
		return Response.json(
			{
				message: 'SOMETHING_WENT_WRONG',
			},
			{ status: 400, statusText: 'Bad Request' },
		);

	return Response.json(
		{
			column,
		},
		{ status: 200, statusText: 'OK' },
	);
}
